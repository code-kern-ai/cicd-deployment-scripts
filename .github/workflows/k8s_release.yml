name: 'K8: Deploy'

on:
  workflow_call:

# Special permissions required for OIDC authentication
permissions:
  id-token: write
  contents: read
  actions: read

jobs:
  az-acr-push:
    name: "Docker: Build & Push"
    runs-on: ubuntu-latest
    environment: ${{ github.event_name == 'release' && 'prod' || 'dev' }}
    env:
      DOCKERFILE: ${{ vars.DOCKERFILE }}
      AZURE_CONTAINER_REGISTRY: ${{ vars.AZURE_CONTAINER_REGISTRY }}
      ACR_LOGIN_USERNAME: ${{ secrets.ACR_LOGIN_USERNAME }}
      ACR_LOGIN_PASSWORD: ${{ secrets.ACR_LOGIN_PASSWORD }}
      IMAGE_TAG: ${{ github.event_name == 'release' && github.event.release.tag_name || 'amd64' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3      
      - name: Log into registry
        uses: docker/login-action@v3
        with:
          registry: "${{ env.AZURE_CONTAINER_REGISTRY }}"
          username: "${{ env.ACR_LOGIN_USERNAME }}"
          password: "${{ env.ACR_LOGIN_PASSWORD }}"
      
      - name: Build & Push :${{ env.IMAGE_TAG }}
        uses: docker/build-push-action@v5
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=max
          file: ${{ env.DOCKERFILE }}
          tags: ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ github.event.repository.name }}:${{ env.IMAGE_TAG }}
          push: true
          build-args: platform=linux/amd64

      - name: Build & Push :latest
        uses: docker/build-push-action@v5
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=max
          file: ${{ env.DOCKERFILE }}
          tags: ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ github.event.repository.name }}:latest
          push: true
          build-args: platform=linux/amd64

  k8-deploy:
    uses: code-kern-ai/cicd-deployment-scripts/.github/workflows/k8s_deploy.yml@dev
    needs: [az-acr-push]
    secrets: inherit
    with:
      environment: ${{ github.event_name == 'release' && 'prod' || 'dev' }}

  gh-release-publish:
    name: 'GitHub: Publish Release'
    runs-on: ubuntu-latest
    needs: [k8-deploy]
    if: github.event_name == 'release' && success()
    env:
      GH_TOKEN: ${{ secrets.TOKEN_GITHUB }}
    steps:
      - name: Publish Release
        run: |
          gh release edit ${{ github.event.release.tag_name }} \
            --prerelease=false \
            --draft=false \
            --latest \
            --repo ${{ github.repository }}
          
          echo "::notice::Release Published"

  gh-release-delete:
    name: 'GitHub: Delete Prerelease'
    runs-on: ubuntu-latest
    needs: [k8-deploy]
    if: github.event_name == 'release' && failure() || cancelled()
    env:
      GH_TOKEN: ${{ secrets.TOKEN_GITHUB }}
    steps:
      - name: Delete Prerelease
        run: |
          gh release delete ${{ github.event.release.tag_name }} \
            --cleanup-tag \
            --yes \
            --repo ${{ github.repository }}
          
          echo "::error::Prerelease and Tag Deleted"